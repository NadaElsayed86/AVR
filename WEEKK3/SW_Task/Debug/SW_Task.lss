
SW_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b16  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000108c  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a92  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 66 05 	call	0xacc	; 0xacc <main>
  7a:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	80 83       	st	Z, r24
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	80 83       	st	Z, r24
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	88 ef       	ldi	r24, 0xF8	; 248
  b4:	80 83       	st	Z, r24
  b6:	e8 e3       	ldi	r30, 0x38	; 56
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	80 83       	st	Z, r24
  be:	e5 e3       	ldi	r30, 0x35	; 53
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	80 83       	st	Z, r24
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	80 83       	st	Z, r24
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	0f 90       	pop	r0
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <DIO_enuSetPortDirection>:
	PORTD=CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);

	return Local_enuErrorState;
}
ES_t DIO_enuSetPortDirection(u8 copy_u8PortID,u8 copy_u8PortValue)
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	00 d0       	rcall	.+0      	; 0xde <DIO_enuSetPortDirection+0x6>
  de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSetPortDirection+0x8>
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	8a 83       	std	Y+2, r24	; 0x02
  e8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
  ea:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8PortID<=DIO_PORTD)
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	84 30       	cpi	r24, 0x04	; 4
  f0:	a8 f5       	brcc	.+106    	; 0x15c <DIO_enuSetPortDirection+0x84>
	{
		switch(copy_u8PortID)
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3d 83       	std	Y+5, r19	; 0x05
  fa:	2c 83       	std	Y+4, r18	; 0x04
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	9d 81       	ldd	r25, Y+5	; 0x05
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 05       	cpc	r25, r1
 104:	d1 f0       	breq	.+52     	; 0x13a <DIO_enuSetPortDirection+0x62>
 106:	2c 81       	ldd	r18, Y+4	; 0x04
 108:	3d 81       	ldd	r19, Y+5	; 0x05
 10a:	22 30       	cpi	r18, 0x02	; 2
 10c:	31 05       	cpc	r19, r1
 10e:	2c f4       	brge	.+10     	; 0x11a <DIO_enuSetPortDirection+0x42>
 110:	8c 81       	ldd	r24, Y+4	; 0x04
 112:	9d 81       	ldd	r25, Y+5	; 0x05
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	61 f0       	breq	.+24     	; 0x130 <DIO_enuSetPortDirection+0x58>
 118:	1e c0       	rjmp	.+60     	; 0x156 <DIO_enuSetPortDirection+0x7e>
 11a:	2c 81       	ldd	r18, Y+4	; 0x04
 11c:	3d 81       	ldd	r19, Y+5	; 0x05
 11e:	22 30       	cpi	r18, 0x02	; 2
 120:	31 05       	cpc	r19, r1
 122:	81 f0       	breq	.+32     	; 0x144 <DIO_enuSetPortDirection+0x6c>
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	9d 81       	ldd	r25, Y+5	; 0x05
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	91 05       	cpc	r25, r1
 12c:	81 f0       	breq	.+32     	; 0x14e <DIO_enuSetPortDirection+0x76>
 12e:	13 c0       	rjmp	.+38     	; 0x156 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=copy_u8PortValue;
 130:	ea e3       	ldi	r30, 0x3A	; 58
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	80 83       	st	Z, r24
 138:	0e c0       	rjmp	.+28     	; 0x156 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=copy_u8PortValue;
 13a:	e7 e3       	ldi	r30, 0x37	; 55
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	80 83       	st	Z, r24
 142:	09 c0       	rjmp	.+18     	; 0x156 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=copy_u8PortValue;
 144:	e4 e3       	ldi	r30, 0x34	; 52
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	80 83       	st	Z, r24
 14c:	04 c0       	rjmp	.+8      	; 0x156 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=copy_u8PortValue;
 14e:	e1 e3       	ldi	r30, 0x31	; 49
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState=ES_OK;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	89 83       	std	Y+1, r24	; 0x01
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 160:	89 81       	ldd	r24, Y+1	; 0x01
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <DIO_enuSetPortValue>:
ES_t DIO_enuSetPortValue(u8 copy_u8PortID,u8 copy_u8PortValue)
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	00 d0       	rcall	.+0      	; 0x178 <DIO_enuSetPortValue+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <DIO_enuSetPortValue+0x8>
 17a:	0f 92       	push	r0
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	8a 83       	std	Y+2, r24	; 0x02
 182:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
 184:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortID<=DIO_PORTD)
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	a8 f5       	brcc	.+106    	; 0x1f6 <DIO_enuSetPortValue+0x84>
	{
		switch(copy_u8PortID)
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	3d 83       	std	Y+5, r19	; 0x05
 194:	2c 83       	std	Y+4, r18	; 0x04
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	9d 81       	ldd	r25, Y+5	; 0x05
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 05       	cpc	r25, r1
 19e:	d1 f0       	breq	.+52     	; 0x1d4 <DIO_enuSetPortValue+0x62>
 1a0:	2c 81       	ldd	r18, Y+4	; 0x04
 1a2:	3d 81       	ldd	r19, Y+5	; 0x05
 1a4:	22 30       	cpi	r18, 0x02	; 2
 1a6:	31 05       	cpc	r19, r1
 1a8:	2c f4       	brge	.+10     	; 0x1b4 <DIO_enuSetPortValue+0x42>
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	9d 81       	ldd	r25, Y+5	; 0x05
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	61 f0       	breq	.+24     	; 0x1ca <DIO_enuSetPortValue+0x58>
 1b2:	1e c0       	rjmp	.+60     	; 0x1f0 <DIO_enuSetPortValue+0x7e>
 1b4:	2c 81       	ldd	r18, Y+4	; 0x04
 1b6:	3d 81       	ldd	r19, Y+5	; 0x05
 1b8:	22 30       	cpi	r18, 0x02	; 2
 1ba:	31 05       	cpc	r19, r1
 1bc:	81 f0       	breq	.+32     	; 0x1de <DIO_enuSetPortValue+0x6c>
 1be:	8c 81       	ldd	r24, Y+4	; 0x04
 1c0:	9d 81       	ldd	r25, Y+5	; 0x05
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	91 05       	cpc	r25, r1
 1c6:	81 f0       	breq	.+32     	; 0x1e8 <DIO_enuSetPortValue+0x76>
 1c8:	13 c0       	rjmp	.+38     	; 0x1f0 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=copy_u8PortValue;
 1ca:	eb e3       	ldi	r30, 0x3B	; 59
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	80 83       	st	Z, r24
 1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=copy_u8PortValue;
 1d4:	e8 e3       	ldi	r30, 0x38	; 56
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	80 83       	st	Z, r24
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=copy_u8PortValue;
 1de:	e5 e3       	ldi	r30, 0x35	; 53
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	80 83       	st	Z, r24
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=copy_u8PortValue;
 1e8:	e2 e3       	ldi	r30, 0x32	; 50
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState=ES_OK;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	89 83       	std	Y+1, r24	; 0x01
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <DIO_enuTogPort>:
ES_t DIO_enuTogPort(u8 copy_u8PortID)
{
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	00 d0       	rcall	.+0      	; 0x212 <DIO_enuTogPort+0x6>
 212:	00 d0       	rcall	.+0      	; 0x214 <DIO_enuTogPort+0x8>
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
 21a:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortID<=DIO_PORTD)
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	08 f0       	brcs	.+2      	; 0x224 <DIO_enuTogPort+0x18>
 222:	41 c0       	rjmp	.+130    	; 0x2a6 <DIO_enuTogPort+0x9a>
	{
		switch(copy_u8PortID)
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	3c 83       	std	Y+4, r19	; 0x04
 22c:	2b 83       	std	Y+3, r18	; 0x03
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	9c 81       	ldd	r25, Y+4	; 0x04
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	91 05       	cpc	r25, r1
 236:	e9 f0       	breq	.+58     	; 0x272 <DIO_enuTogPort+0x66>
 238:	2b 81       	ldd	r18, Y+3	; 0x03
 23a:	3c 81       	ldd	r19, Y+4	; 0x04
 23c:	22 30       	cpi	r18, 0x02	; 2
 23e:	31 05       	cpc	r19, r1
 240:	2c f4       	brge	.+10     	; 0x24c <DIO_enuTogPort+0x40>
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	9c 81       	ldd	r25, Y+4	; 0x04
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	61 f0       	breq	.+24     	; 0x262 <DIO_enuTogPort+0x56>
 24a:	2a c0       	rjmp	.+84     	; 0x2a0 <DIO_enuTogPort+0x94>
 24c:	2b 81       	ldd	r18, Y+3	; 0x03
 24e:	3c 81       	ldd	r19, Y+4	; 0x04
 250:	22 30       	cpi	r18, 0x02	; 2
 252:	31 05       	cpc	r19, r1
 254:	b1 f0       	breq	.+44     	; 0x282 <DIO_enuTogPort+0x76>
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	91 05       	cpc	r25, r1
 25e:	c9 f0       	breq	.+50     	; 0x292 <DIO_enuTogPort+0x86>
 260:	1f c0       	rjmp	.+62     	; 0x2a0 <DIO_enuTogPort+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
 262:	ab e3       	ldi	r26, 0x3B	; 59
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	eb e3       	ldi	r30, 0x3B	; 59
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 95       	com	r24
 26e:	8c 93       	st	X, r24
 270:	17 c0       	rjmp	.+46     	; 0x2a0 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
 272:	a8 e3       	ldi	r26, 0x38	; 56
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	e8 e3       	ldi	r30, 0x38	; 56
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 95       	com	r24
 27e:	8c 93       	st	X, r24
 280:	0f c0       	rjmp	.+30     	; 0x2a0 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
 282:	a5 e3       	ldi	r26, 0x35	; 53
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	e5 e3       	ldi	r30, 0x35	; 53
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 95       	com	r24
 28e:	8c 93       	st	X, r24
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
 292:	a2 e3       	ldi	r26, 0x32	; 50
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	e2 e3       	ldi	r30, 0x32	; 50
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 95       	com	r24
 29e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState=ES_OK;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_enuTogPort+0x9e>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	cf 91       	pop	r28
 2b6:	df 91       	pop	r29
 2b8:	08 95       	ret

000002ba <DIO_enuGetPortValue>:
ES_t DIO_enuGetPortValue(u8 copy_u8PortID,u8 copy_u8PortValue,u8 * copy_pu8PortValue)
{
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	27 97       	sbiw	r28, 0x07	; 7
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	8a 83       	std	Y+2, r24	; 0x02
 2d0:	6b 83       	std	Y+3, r22	; 0x03
 2d2:	5d 83       	std	Y+5, r21	; 0x05
 2d4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
 2d6:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pu8PortValue!=NULL)
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
 2da:	9d 81       	ldd	r25, Y+5	; 0x05
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	09 f4       	brne	.+2      	; 0x2e2 <DIO_enuGetPortValue+0x28>
 2e0:	43 c0       	rjmp	.+134    	; 0x368 <DIO_enuGetPortValue+0xae>
	{
		if(copy_u8PortID<=DIO_PORTD)
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	84 30       	cpi	r24, 0x04	; 4
 2e6:	e8 f5       	brcc	.+122    	; 0x362 <DIO_enuGetPortValue+0xa8>
		{
			switch(copy_u8PortID)
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	3f 83       	std	Y+7, r19	; 0x07
 2f0:	2e 83       	std	Y+6, r18	; 0x06
 2f2:	8e 81       	ldd	r24, Y+6	; 0x06
 2f4:	9f 81       	ldd	r25, Y+7	; 0x07
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	91 05       	cpc	r25, r1
 2fa:	e1 f0       	breq	.+56     	; 0x334 <DIO_enuGetPortValue+0x7a>
 2fc:	2e 81       	ldd	r18, Y+6	; 0x06
 2fe:	3f 81       	ldd	r19, Y+7	; 0x07
 300:	22 30       	cpi	r18, 0x02	; 2
 302:	31 05       	cpc	r19, r1
 304:	2c f4       	brge	.+10     	; 0x310 <DIO_enuGetPortValue+0x56>
 306:	8e 81       	ldd	r24, Y+6	; 0x06
 308:	9f 81       	ldd	r25, Y+7	; 0x07
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	61 f0       	breq	.+24     	; 0x326 <DIO_enuGetPortValue+0x6c>
 30e:	26 c0       	rjmp	.+76     	; 0x35c <DIO_enuGetPortValue+0xa2>
 310:	2e 81       	ldd	r18, Y+6	; 0x06
 312:	3f 81       	ldd	r19, Y+7	; 0x07
 314:	22 30       	cpi	r18, 0x02	; 2
 316:	31 05       	cpc	r19, r1
 318:	a1 f0       	breq	.+40     	; 0x342 <DIO_enuGetPortValue+0x88>
 31a:	8e 81       	ldd	r24, Y+6	; 0x06
 31c:	9f 81       	ldd	r25, Y+7	; 0x07
 31e:	83 30       	cpi	r24, 0x03	; 3
 320:	91 05       	cpc	r25, r1
 322:	b1 f0       	breq	.+44     	; 0x350 <DIO_enuGetPortValue+0x96>
 324:	1b c0       	rjmp	.+54     	; 0x35c <DIO_enuGetPortValue+0xa2>
			{
			case DIO_PORTA:
				*copy_pu8PortValue=PINA;
 326:	e9 e3       	ldi	r30, 0x39	; 57
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	ec 81       	ldd	r30, Y+4	; 0x04
 32e:	fd 81       	ldd	r31, Y+5	; 0x05
 330:	80 83       	st	Z, r24
 332:	14 c0       	rjmp	.+40     	; 0x35c <DIO_enuGetPortValue+0xa2>
				break;
			case DIO_PORTB:
				*copy_pu8PortValue=PINB;
 334:	e6 e3       	ldi	r30, 0x36	; 54
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	ec 81       	ldd	r30, Y+4	; 0x04
 33c:	fd 81       	ldd	r31, Y+5	; 0x05
 33e:	80 83       	st	Z, r24
 340:	0d c0       	rjmp	.+26     	; 0x35c <DIO_enuGetPortValue+0xa2>
				break;
			case DIO_PORTC:
				*copy_pu8PortValue=PINC;
 342:	e3 e3       	ldi	r30, 0x33	; 51
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	ec 81       	ldd	r30, Y+4	; 0x04
 34a:	fd 81       	ldd	r31, Y+5	; 0x05
 34c:	80 83       	st	Z, r24
 34e:	06 c0       	rjmp	.+12     	; 0x35c <DIO_enuGetPortValue+0xa2>
				break;
			case DIO_PORTD:
				*copy_pu8PortValue=PIND;
 350:	e0 e3       	ldi	r30, 0x30	; 48
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	ec 81       	ldd	r30, Y+4	; 0x04
 358:	fd 81       	ldd	r31, Y+5	; 0x05
 35a:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState=ES_OK;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	05 c0       	rjmp	.+10     	; 0x36c <DIO_enuGetPortValue+0xb2>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	89 83       	std	Y+1, r24	; 0x01
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_enuGetPortValue+0xb2>
		}

	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 36c:	89 81       	ldd	r24, Y+1	; 0x01
}
 36e:	27 96       	adiw	r28, 0x07	; 7
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 copy_u8PortID,u8 copy_u8PinID,u8 copy_u8PinVal)
{
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	00 d0       	rcall	.+0      	; 0x386 <DIO_enuSetPinDirection+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <DIO_enuSetPinDirection+0x8>
 388:	00 d0       	rcall	.+0      	; 0x38a <DIO_enuSetPinDirection+0xa>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	8a 83       	std	Y+2, r24	; 0x02
 390:	6b 83       	std	Y+3, r22	; 0x03
 392:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
 394:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8PortID<=DIO_PORTD && copy_u8PinID<=PIN7 && copy_u8PinVal<=DIO_OUTPUT)
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	84 30       	cpi	r24, 0x04	; 4
 39a:	08 f0       	brcs	.+2      	; 0x39e <DIO_enuSetPinDirection+0x1e>
 39c:	d1 c0       	rjmp	.+418    	; 0x540 <DIO_enuSetPinDirection+0x1c0>
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	88 30       	cpi	r24, 0x08	; 8
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <DIO_enuSetPinDirection+0x26>
 3a4:	cd c0       	rjmp	.+410    	; 0x540 <DIO_enuSetPinDirection+0x1c0>
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <DIO_enuSetPinDirection+0x2e>
 3ac:	c9 c0       	rjmp	.+402    	; 0x540 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(copy_u8PortID)
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	3e 83       	std	Y+6, r19	; 0x06
 3b6:	2d 83       	std	Y+5, r18	; 0x05
 3b8:	6d 81       	ldd	r22, Y+5	; 0x05
 3ba:	7e 81       	ldd	r23, Y+6	; 0x06
 3bc:	61 30       	cpi	r22, 0x01	; 1
 3be:	71 05       	cpc	r23, r1
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <DIO_enuSetPinDirection+0x44>
 3c2:	41 c0       	rjmp	.+130    	; 0x446 <DIO_enuSetPinDirection+0xc6>
 3c4:	8d 81       	ldd	r24, Y+5	; 0x05
 3c6:	9e 81       	ldd	r25, Y+6	; 0x06
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	91 05       	cpc	r25, r1
 3cc:	34 f4       	brge	.+12     	; 0x3da <DIO_enuSetPinDirection+0x5a>
 3ce:	2d 81       	ldd	r18, Y+5	; 0x05
 3d0:	3e 81       	ldd	r19, Y+6	; 0x06
 3d2:	21 15       	cp	r18, r1
 3d4:	31 05       	cpc	r19, r1
 3d6:	71 f0       	breq	.+28     	; 0x3f4 <DIO_enuSetPinDirection+0x74>
 3d8:	b0 c0       	rjmp	.+352    	; 0x53a <DIO_enuSetPinDirection+0x1ba>
 3da:	6d 81       	ldd	r22, Y+5	; 0x05
 3dc:	7e 81       	ldd	r23, Y+6	; 0x06
 3de:	62 30       	cpi	r22, 0x02	; 2
 3e0:	71 05       	cpc	r23, r1
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <DIO_enuSetPinDirection+0x66>
 3e4:	59 c0       	rjmp	.+178    	; 0x498 <DIO_enuSetPinDirection+0x118>
 3e6:	8d 81       	ldd	r24, Y+5	; 0x05
 3e8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	91 05       	cpc	r25, r1
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <DIO_enuSetPinDirection+0x72>
 3f0:	7c c0       	rjmp	.+248    	; 0x4ea <DIO_enuSetPinDirection+0x16a>
 3f2:	a3 c0       	rjmp	.+326    	; 0x53a <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &=~(1<<copy_u8PinID);
 3f4:	aa e3       	ldi	r26, 0x3A	; 58
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	ea e3       	ldi	r30, 0x3A	; 58
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	48 2f       	mov	r20, r24
 400:	8b 81       	ldd	r24, Y+3	; 0x03
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_enuSetPinDirection+0x90>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	2a 95       	dec	r18
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_enuSetPinDirection+0x8c>
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	8c 93       	st	X, r24
			DDRA |=(copy_u8PinVal<<copy_u8PinID);
 41a:	aa e3       	ldi	r26, 0x3A	; 58
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	ea e3       	ldi	r30, 0x3A	; 58
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	48 2f       	mov	r20, r24
 426:	8c 81       	ldd	r24, Y+4	; 0x04
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	88 2f       	mov	r24, r24
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_enuSetPinDirection+0xba>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_enuSetPinDirection+0xb6>
 43e:	cb 01       	movw	r24, r22
 440:	84 2b       	or	r24, r20
 442:	8c 93       	st	X, r24
 444:	7a c0       	rjmp	.+244    	; 0x53a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &=~(1<<copy_u8PinID);
 446:	a7 e3       	ldi	r26, 0x37	; 55
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e7 e3       	ldi	r30, 0x37	; 55
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	8b 81       	ldd	r24, Y+3	; 0x03
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_enuSetPinDirection+0xe2>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	2a 95       	dec	r18
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_enuSetPinDirection+0xde>
 466:	80 95       	com	r24
 468:	84 23       	and	r24, r20
 46a:	8c 93       	st	X, r24
			DDRB |=(copy_u8PinVal<<copy_u8PinID);
 46c:	a7 e3       	ldi	r26, 0x37	; 55
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	e7 e3       	ldi	r30, 0x37	; 55
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	88 2f       	mov	r24, r24
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_enuSetPinDirection+0x10c>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_enuSetPinDirection+0x108>
 490:	cb 01       	movw	r24, r22
 492:	84 2b       	or	r24, r20
 494:	8c 93       	st	X, r24
 496:	51 c0       	rjmp	.+162    	; 0x53a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &=~(1<<copy_u8PinID);
 498:	a4 e3       	ldi	r26, 0x34	; 52
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e4 e3       	ldi	r30, 0x34	; 52
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_enuSetPinDirection+0x134>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	2a 95       	dec	r18
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_enuSetPinDirection+0x130>
 4b8:	80 95       	com	r24
 4ba:	84 23       	and	r24, r20
 4bc:	8c 93       	st	X, r24
			DDRC |=(copy_u8PinVal<<copy_u8PinID);
 4be:	a4 e3       	ldi	r26, 0x34	; 52
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e4 e3       	ldi	r30, 0x34	; 52
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8c 81       	ldd	r24, Y+4	; 0x04
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	b9 01       	movw	r22, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_enuSetPinDirection+0x15e>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_enuSetPinDirection+0x15a>
 4e2:	cb 01       	movw	r24, r22
 4e4:	84 2b       	or	r24, r20
 4e6:	8c 93       	st	X, r24
 4e8:	28 c0       	rjmp	.+80     	; 0x53a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &=~(1<<copy_u8PinID);
 4ea:	a1 e3       	ldi	r26, 0x31	; 49
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	e1 e3       	ldi	r30, 0x31	; 49
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	48 2f       	mov	r20, r24
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_enuSetPinDirection+0x186>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	2a 95       	dec	r18
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_enuSetPinDirection+0x182>
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	8c 93       	st	X, r24
			DDRD |=(copy_u8PinVal<<copy_u8PinID);
 510:	a1 e3       	ldi	r26, 0x31	; 49
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	e1 e3       	ldi	r30, 0x31	; 49
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	48 2f       	mov	r20, r24
 51c:	8c 81       	ldd	r24, Y+4	; 0x04
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	8b 81       	ldd	r24, Y+3	; 0x03
 524:	88 2f       	mov	r24, r24
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_enuSetPinDirection+0x1b0>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	8a 95       	dec	r24
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_enuSetPinDirection+0x1ac>
 534:	cb 01       	movw	r24, r22
 536:	84 2b       	or	r24, r20
 538:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState=ES_OK;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_enuSetPinDirection+0x1c4>

	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
 544:	89 81       	ldd	r24, Y+1	; 0x01
}
 546:	26 96       	adiw	r28, 0x06	; 6
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <DIO_enuSetPinValue>:
ES_t DIO_enuSetPinValue(u8 copy_u8PortID,u8 copy_u8PinID,u8 copy_u8PinVal)
{
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	00 d0       	rcall	.+0      	; 0x55e <DIO_enuSetPinValue+0x6>
 55e:	00 d0       	rcall	.+0      	; 0x560 <DIO_enuSetPinValue+0x8>
 560:	00 d0       	rcall	.+0      	; 0x562 <DIO_enuSetPinValue+0xa>
 562:	cd b7       	in	r28, 0x3d	; 61
 564:	de b7       	in	r29, 0x3e	; 62
 566:	8a 83       	std	Y+2, r24	; 0x02
 568:	6b 83       	std	Y+3, r22	; 0x03
 56a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
 56c:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortID<=DIO_PORTD && copy_u8PinID<=PIN7 && copy_u8PinVal<=DIO_OUTPUT)
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	84 30       	cpi	r24, 0x04	; 4
 572:	08 f0       	brcs	.+2      	; 0x576 <DIO_enuSetPinValue+0x1e>
 574:	d1 c0       	rjmp	.+418    	; 0x718 <DIO_enuSetPinValue+0x1c0>
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	88 30       	cpi	r24, 0x08	; 8
 57a:	08 f0       	brcs	.+2      	; 0x57e <DIO_enuSetPinValue+0x26>
 57c:	cd c0       	rjmp	.+410    	; 0x718 <DIO_enuSetPinValue+0x1c0>
 57e:	8c 81       	ldd	r24, Y+4	; 0x04
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	08 f0       	brcs	.+2      	; 0x586 <DIO_enuSetPinValue+0x2e>
 584:	c9 c0       	rjmp	.+402    	; 0x718 <DIO_enuSetPinValue+0x1c0>
		{
		switch(copy_u8PortID)
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	3e 83       	std	Y+6, r19	; 0x06
 58e:	2d 83       	std	Y+5, r18	; 0x05
 590:	6d 81       	ldd	r22, Y+5	; 0x05
 592:	7e 81       	ldd	r23, Y+6	; 0x06
 594:	61 30       	cpi	r22, 0x01	; 1
 596:	71 05       	cpc	r23, r1
 598:	09 f4       	brne	.+2      	; 0x59c <DIO_enuSetPinValue+0x44>
 59a:	41 c0       	rjmp	.+130    	; 0x61e <DIO_enuSetPinValue+0xc6>
 59c:	8d 81       	ldd	r24, Y+5	; 0x05
 59e:	9e 81       	ldd	r25, Y+6	; 0x06
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	91 05       	cpc	r25, r1
 5a4:	34 f4       	brge	.+12     	; 0x5b2 <DIO_enuSetPinValue+0x5a>
 5a6:	2d 81       	ldd	r18, Y+5	; 0x05
 5a8:	3e 81       	ldd	r19, Y+6	; 0x06
 5aa:	21 15       	cp	r18, r1
 5ac:	31 05       	cpc	r19, r1
 5ae:	71 f0       	breq	.+28     	; 0x5cc <DIO_enuSetPinValue+0x74>
 5b0:	b0 c0       	rjmp	.+352    	; 0x712 <DIO_enuSetPinValue+0x1ba>
 5b2:	6d 81       	ldd	r22, Y+5	; 0x05
 5b4:	7e 81       	ldd	r23, Y+6	; 0x06
 5b6:	62 30       	cpi	r22, 0x02	; 2
 5b8:	71 05       	cpc	r23, r1
 5ba:	09 f4       	brne	.+2      	; 0x5be <DIO_enuSetPinValue+0x66>
 5bc:	59 c0       	rjmp	.+178    	; 0x670 <DIO_enuSetPinValue+0x118>
 5be:	8d 81       	ldd	r24, Y+5	; 0x05
 5c0:	9e 81       	ldd	r25, Y+6	; 0x06
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	91 05       	cpc	r25, r1
 5c6:	09 f4       	brne	.+2      	; 0x5ca <DIO_enuSetPinValue+0x72>
 5c8:	7c c0       	rjmp	.+248    	; 0x6c2 <DIO_enuSetPinValue+0x16a>
 5ca:	a3 c0       	rjmp	.+326    	; 0x712 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &=~(1<<copy_u8PinID);
 5cc:	ab e3       	ldi	r26, 0x3B	; 59
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	eb e3       	ldi	r30, 0x3B	; 59
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	48 2f       	mov	r20, r24
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	28 2f       	mov	r18, r24
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_enuSetPinValue+0x90>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	2a 95       	dec	r18
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_enuSetPinValue+0x8c>
 5ec:	80 95       	com	r24
 5ee:	84 23       	and	r24, r20
 5f0:	8c 93       	st	X, r24
			PORTA |=(copy_u8PinVal<<copy_u8PinID);
 5f2:	ab e3       	ldi	r26, 0x3B	; 59
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	eb e3       	ldi	r30, 0x3B	; 59
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	48 2f       	mov	r20, r24
 5fe:	8c 81       	ldd	r24, Y+4	; 0x04
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	88 2f       	mov	r24, r24
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	b9 01       	movw	r22, r18
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_enuSetPinValue+0xba>
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	8a 95       	dec	r24
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_enuSetPinValue+0xb6>
 616:	cb 01       	movw	r24, r22
 618:	84 2b       	or	r24, r20
 61a:	8c 93       	st	X, r24
 61c:	7a c0       	rjmp	.+244    	; 0x712 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &=~(1<<copy_u8PinID);
 61e:	a8 e3       	ldi	r26, 0x38	; 56
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e8 e3       	ldi	r30, 0x38	; 56
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	48 2f       	mov	r20, r24
 62a:	8b 81       	ldd	r24, Y+3	; 0x03
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_enuSetPinValue+0xe2>
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	2a 95       	dec	r18
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_enuSetPinValue+0xde>
 63e:	80 95       	com	r24
 640:	84 23       	and	r24, r20
 642:	8c 93       	st	X, r24
			PORTB |=(copy_u8PinVal<<copy_u8PinID);
 644:	a8 e3       	ldi	r26, 0x38	; 56
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	e8 e3       	ldi	r30, 0x38	; 56
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	48 2f       	mov	r20, r24
 650:	8c 81       	ldd	r24, Y+4	; 0x04
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	88 2f       	mov	r24, r24
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	b9 01       	movw	r22, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_enuSetPinValue+0x10c>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	8a 95       	dec	r24
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_enuSetPinValue+0x108>
 668:	cb 01       	movw	r24, r22
 66a:	84 2b       	or	r24, r20
 66c:	8c 93       	st	X, r24
 66e:	51 c0       	rjmp	.+162    	; 0x712 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &=~(1<<copy_u8PinID);
 670:	a5 e3       	ldi	r26, 0x35	; 53
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	e5 e3       	ldi	r30, 0x35	; 53
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	48 2f       	mov	r20, r24
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_enuSetPinValue+0x134>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	2a 95       	dec	r18
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_enuSetPinValue+0x130>
 690:	80 95       	com	r24
 692:	84 23       	and	r24, r20
 694:	8c 93       	st	X, r24
			PORTC |=(copy_u8PinVal<<copy_u8PinID);
 696:	a5 e3       	ldi	r26, 0x35	; 53
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	e5 e3       	ldi	r30, 0x35	; 53
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	48 2f       	mov	r20, r24
 6a2:	8c 81       	ldd	r24, Y+4	; 0x04
 6a4:	28 2f       	mov	r18, r24
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	88 2f       	mov	r24, r24
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	b9 01       	movw	r22, r18
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_enuSetPinValue+0x15e>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	8a 95       	dec	r24
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_enuSetPinValue+0x15a>
 6ba:	cb 01       	movw	r24, r22
 6bc:	84 2b       	or	r24, r20
 6be:	8c 93       	st	X, r24
 6c0:	28 c0       	rjmp	.+80     	; 0x712 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &=~(1<<copy_u8PinID);
 6c2:	a2 e3       	ldi	r26, 0x32	; 50
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	e2 e3       	ldi	r30, 0x32	; 50
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	48 2f       	mov	r20, r24
 6ce:	8b 81       	ldd	r24, Y+3	; 0x03
 6d0:	28 2f       	mov	r18, r24
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_enuSetPinValue+0x186>
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	2a 95       	dec	r18
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_enuSetPinValue+0x182>
 6e2:	80 95       	com	r24
 6e4:	84 23       	and	r24, r20
 6e6:	8c 93       	st	X, r24
			PORTD |=(copy_u8PinVal<<copy_u8PinID);
 6e8:	a2 e3       	ldi	r26, 0x32	; 50
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	e2 e3       	ldi	r30, 0x32	; 50
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	48 2f       	mov	r20, r24
 6f4:	8c 81       	ldd	r24, Y+4	; 0x04
 6f6:	28 2f       	mov	r18, r24
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	88 2f       	mov	r24, r24
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	b9 01       	movw	r22, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_enuSetPinValue+0x1b0>
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	8a 95       	dec	r24
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_enuSetPinValue+0x1ac>
 70c:	cb 01       	movw	r24, r22
 70e:	84 2b       	or	r24, r20
 710:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState=ES_OK;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_enuSetPinValue+0x1c4>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
 71c:	89 81       	ldd	r24, Y+1	; 0x01
}
 71e:	26 96       	adiw	r28, 0x06	; 6
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	cf 91       	pop	r28
 72c:	df 91       	pop	r29
 72e:	08 95       	ret

00000730 <DIO_enuTogPin>:
ES_t DIO_enuTogPin(u8 copy_u8PortID,u8 copy_u8PinID)
{
 730:	df 93       	push	r29
 732:	cf 93       	push	r28
 734:	00 d0       	rcall	.+0      	; 0x736 <DIO_enuTogPin+0x6>
 736:	00 d0       	rcall	.+0      	; 0x738 <DIO_enuTogPin+0x8>
 738:	0f 92       	push	r0
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	8a 83       	std	Y+2, r24	; 0x02
 740:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
 742:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8PortID<=DIO_PORTD && copy_u8PinID<=PIN7)
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	84 30       	cpi	r24, 0x04	; 4
 748:	08 f0       	brcs	.+2      	; 0x74c <DIO_enuTogPin+0x1c>
 74a:	75 c0       	rjmp	.+234    	; 0x836 <DIO_enuTogPin+0x106>
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	88 30       	cpi	r24, 0x08	; 8
 750:	08 f0       	brcs	.+2      	; 0x754 <DIO_enuTogPin+0x24>
 752:	71 c0       	rjmp	.+226    	; 0x836 <DIO_enuTogPin+0x106>
	{
		switch(copy_u8PortID)
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	28 2f       	mov	r18, r24
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	3d 83       	std	Y+5, r19	; 0x05
 75c:	2c 83       	std	Y+4, r18	; 0x04
 75e:	8c 81       	ldd	r24, Y+4	; 0x04
 760:	9d 81       	ldd	r25, Y+5	; 0x05
 762:	81 30       	cpi	r24, 0x01	; 1
 764:	91 05       	cpc	r25, r1
 766:	49 f1       	breq	.+82     	; 0x7ba <DIO_enuTogPin+0x8a>
 768:	2c 81       	ldd	r18, Y+4	; 0x04
 76a:	3d 81       	ldd	r19, Y+5	; 0x05
 76c:	22 30       	cpi	r18, 0x02	; 2
 76e:	31 05       	cpc	r19, r1
 770:	2c f4       	brge	.+10     	; 0x77c <DIO_enuTogPin+0x4c>
 772:	8c 81       	ldd	r24, Y+4	; 0x04
 774:	9d 81       	ldd	r25, Y+5	; 0x05
 776:	00 97       	sbiw	r24, 0x00	; 0
 778:	61 f0       	breq	.+24     	; 0x792 <DIO_enuTogPin+0x62>
 77a:	5a c0       	rjmp	.+180    	; 0x830 <DIO_enuTogPin+0x100>
 77c:	2c 81       	ldd	r18, Y+4	; 0x04
 77e:	3d 81       	ldd	r19, Y+5	; 0x05
 780:	22 30       	cpi	r18, 0x02	; 2
 782:	31 05       	cpc	r19, r1
 784:	71 f1       	breq	.+92     	; 0x7e2 <DIO_enuTogPin+0xb2>
 786:	8c 81       	ldd	r24, Y+4	; 0x04
 788:	9d 81       	ldd	r25, Y+5	; 0x05
 78a:	83 30       	cpi	r24, 0x03	; 3
 78c:	91 05       	cpc	r25, r1
 78e:	e9 f1       	breq	.+122    	; 0x80a <DIO_enuTogPin+0xda>
 790:	4f c0       	rjmp	.+158    	; 0x830 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA^=(1<<copy_u8PinID);
 792:	ab e3       	ldi	r26, 0x3B	; 59
 794:	b0 e0       	ldi	r27, 0x00	; 0
 796:	eb e3       	ldi	r30, 0x3B	; 59
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	48 2f       	mov	r20, r24
 79e:	8b 81       	ldd	r24, Y+3	; 0x03
 7a0:	28 2f       	mov	r18, r24
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	02 2e       	mov	r0, r18
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_enuTogPin+0x80>
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	0a 94       	dec	r0
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_enuTogPin+0x7c>
 7b4:	84 27       	eor	r24, r20
 7b6:	8c 93       	st	X, r24
 7b8:	3b c0       	rjmp	.+118    	; 0x830 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB^=(1<<copy_u8PinID);
 7ba:	a8 e3       	ldi	r26, 0x38	; 56
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	e8 e3       	ldi	r30, 0x38	; 56
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	48 2f       	mov	r20, r24
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 2e       	mov	r0, r18
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_enuTogPin+0xa8>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	0a 94       	dec	r0
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_enuTogPin+0xa4>
 7dc:	84 27       	eor	r24, r20
 7de:	8c 93       	st	X, r24
 7e0:	27 c0       	rjmp	.+78     	; 0x830 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC^=(1<<copy_u8PinID);
 7e2:	a5 e3       	ldi	r26, 0x35	; 53
 7e4:	b0 e0       	ldi	r27, 0x00	; 0
 7e6:	e5 e3       	ldi	r30, 0x35	; 53
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	48 2f       	mov	r20, r24
 7ee:	8b 81       	ldd	r24, Y+3	; 0x03
 7f0:	28 2f       	mov	r18, r24
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	02 2e       	mov	r0, r18
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <DIO_enuTogPin+0xd0>
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	0a 94       	dec	r0
 802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_enuTogPin+0xcc>
 804:	84 27       	eor	r24, r20
 806:	8c 93       	st	X, r24
 808:	13 c0       	rjmp	.+38     	; 0x830 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD^=(1<<copy_u8PinID);
 80a:	a2 e3       	ldi	r26, 0x32	; 50
 80c:	b0 e0       	ldi	r27, 0x00	; 0
 80e:	e2 e3       	ldi	r30, 0x32	; 50
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	48 2f       	mov	r20, r24
 816:	8b 81       	ldd	r24, Y+3	; 0x03
 818:	28 2f       	mov	r18, r24
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 2e       	mov	r0, r18
 822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_enuTogPin+0xf8>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_enuTogPin+0xf4>
 82c:	84 27       	eor	r24, r20
 82e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState=ES_OK;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	89 83       	std	Y+1, r24	; 0x01
 834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
 836:	83 e0       	ldi	r24, 0x03	; 3
 838:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
 83a:	89 81       	ldd	r24, Y+1	; 0x01
}
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	cf 91       	pop	r28
 848:	df 91       	pop	r29
 84a:	08 95       	ret

0000084c <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 copy_u8PortID,u8 copy_u8PinID,u8 *copy_pu8PinVal)
{
 84c:	df 93       	push	r29
 84e:	cf 93       	push	r28
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62
 854:	27 97       	sbiw	r28, 0x07	; 7
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	f8 94       	cli
 85a:	de bf       	out	0x3e, r29	; 62
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	cd bf       	out	0x3d, r28	; 61
 860:	8a 83       	std	Y+2, r24	; 0x02
 862:	6b 83       	std	Y+3, r22	; 0x03
 864:	5d 83       	std	Y+5, r21	; 0x05
 866:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
 868:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pu8PinVal !=NULL)
 86a:	8c 81       	ldd	r24, Y+4	; 0x04
 86c:	9d 81       	ldd	r25, Y+5	; 0x05
 86e:	00 97       	sbiw	r24, 0x00	; 0
 870:	09 f4       	brne	.+2      	; 0x874 <__stack+0x15>
 872:	7e c0       	rjmp	.+252    	; 0x970 <__stack+0x111>
	{
		if(copy_u8PortID<=DIO_PORTD && copy_u8PinID<=PIN7)
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	84 30       	cpi	r24, 0x04	; 4
 878:	08 f0       	brcs	.+2      	; 0x87c <__stack+0x1d>
 87a:	77 c0       	rjmp	.+238    	; 0x96a <__stack+0x10b>
 87c:	8b 81       	ldd	r24, Y+3	; 0x03
 87e:	88 30       	cpi	r24, 0x08	; 8
 880:	08 f0       	brcs	.+2      	; 0x884 <__stack+0x25>
 882:	73 c0       	rjmp	.+230    	; 0x96a <__stack+0x10b>
		{
			switch(copy_u8PortID)
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	28 2f       	mov	r18, r24
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	3f 83       	std	Y+7, r19	; 0x07
 88c:	2e 83       	std	Y+6, r18	; 0x06
 88e:	4e 81       	ldd	r20, Y+6	; 0x06
 890:	5f 81       	ldd	r21, Y+7	; 0x07
 892:	41 30       	cpi	r20, 0x01	; 1
 894:	51 05       	cpc	r21, r1
 896:	59 f1       	breq	.+86     	; 0x8ee <__stack+0x8f>
 898:	8e 81       	ldd	r24, Y+6	; 0x06
 89a:	9f 81       	ldd	r25, Y+7	; 0x07
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	91 05       	cpc	r25, r1
 8a0:	34 f4       	brge	.+12     	; 0x8ae <__stack+0x4f>
 8a2:	2e 81       	ldd	r18, Y+6	; 0x06
 8a4:	3f 81       	ldd	r19, Y+7	; 0x07
 8a6:	21 15       	cp	r18, r1
 8a8:	31 05       	cpc	r19, r1
 8aa:	69 f0       	breq	.+26     	; 0x8c6 <__stack+0x67>
 8ac:	5b c0       	rjmp	.+182    	; 0x964 <__stack+0x105>
 8ae:	4e 81       	ldd	r20, Y+6	; 0x06
 8b0:	5f 81       	ldd	r21, Y+7	; 0x07
 8b2:	42 30       	cpi	r20, 0x02	; 2
 8b4:	51 05       	cpc	r21, r1
 8b6:	79 f1       	breq	.+94     	; 0x916 <__stack+0xb7>
 8b8:	8e 81       	ldd	r24, Y+6	; 0x06
 8ba:	9f 81       	ldd	r25, Y+7	; 0x07
 8bc:	83 30       	cpi	r24, 0x03	; 3
 8be:	91 05       	cpc	r25, r1
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x65>
 8c2:	3d c0       	rjmp	.+122    	; 0x93e <__stack+0xdf>
 8c4:	4f c0       	rjmp	.+158    	; 0x964 <__stack+0x105>
			{
			case DIO_PORTA:
				*copy_pu8PinVal=((PINA>>copy_u8PinID)&1);
 8c6:	e9 e3       	ldi	r30, 0x39	; 57
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	28 2f       	mov	r18, r24
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	8b 81       	ldd	r24, Y+3	; 0x03
 8d2:	88 2f       	mov	r24, r24
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	a9 01       	movw	r20, r18
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
 8da:	55 95       	asr	r21
 8dc:	47 95       	ror	r20
 8de:	8a 95       	dec	r24
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
 8e2:	ca 01       	movw	r24, r20
 8e4:	81 70       	andi	r24, 0x01	; 1
 8e6:	ec 81       	ldd	r30, Y+4	; 0x04
 8e8:	fd 81       	ldd	r31, Y+5	; 0x05
 8ea:	80 83       	st	Z, r24
 8ec:	3b c0       	rjmp	.+118    	; 0x964 <__stack+0x105>
				break;
			case DIO_PORTB:
				*copy_pu8PinVal=((PINB>>copy_u8PinID)&1);
 8ee:	e6 e3       	ldi	r30, 0x36	; 54
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	28 2f       	mov	r18, r24
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	8b 81       	ldd	r24, Y+3	; 0x03
 8fa:	88 2f       	mov	r24, r24
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	a9 01       	movw	r20, r18
 900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0xa7>
 902:	55 95       	asr	r21
 904:	47 95       	ror	r20
 906:	8a 95       	dec	r24
 908:	e2 f7       	brpl	.-8      	; 0x902 <__stack+0xa3>
 90a:	ca 01       	movw	r24, r20
 90c:	81 70       	andi	r24, 0x01	; 1
 90e:	ec 81       	ldd	r30, Y+4	; 0x04
 910:	fd 81       	ldd	r31, Y+5	; 0x05
 912:	80 83       	st	Z, r24
 914:	27 c0       	rjmp	.+78     	; 0x964 <__stack+0x105>
				break;
			case DIO_PORTC:
				*copy_pu8PinVal=((PINC>>copy_u8PinID)&1);
 916:	e3 e3       	ldi	r30, 0x33	; 51
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	28 2f       	mov	r18, r24
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	8b 81       	ldd	r24, Y+3	; 0x03
 922:	88 2f       	mov	r24, r24
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	a9 01       	movw	r20, r18
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0xcf>
 92a:	55 95       	asr	r21
 92c:	47 95       	ror	r20
 92e:	8a 95       	dec	r24
 930:	e2 f7       	brpl	.-8      	; 0x92a <__stack+0xcb>
 932:	ca 01       	movw	r24, r20
 934:	81 70       	andi	r24, 0x01	; 1
 936:	ec 81       	ldd	r30, Y+4	; 0x04
 938:	fd 81       	ldd	r31, Y+5	; 0x05
 93a:	80 83       	st	Z, r24
 93c:	13 c0       	rjmp	.+38     	; 0x964 <__stack+0x105>
				break;
			case DIO_PORTD:
				*copy_pu8PinVal=((PIND>>copy_u8PinID)&1);
 93e:	e0 e3       	ldi	r30, 0x30	; 48
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	28 2f       	mov	r18, r24
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	8b 81       	ldd	r24, Y+3	; 0x03
 94a:	88 2f       	mov	r24, r24
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	a9 01       	movw	r20, r18
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0xf7>
 952:	55 95       	asr	r21
 954:	47 95       	ror	r20
 956:	8a 95       	dec	r24
 958:	e2 f7       	brpl	.-8      	; 0x952 <__stack+0xf3>
 95a:	ca 01       	movw	r24, r20
 95c:	81 70       	andi	r24, 0x01	; 1
 95e:	ec 81       	ldd	r30, Y+4	; 0x04
 960:	fd 81       	ldd	r31, Y+5	; 0x05
 962:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState=ES_OK;
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	89 83       	std	Y+1, r24	; 0x01
 968:	05 c0       	rjmp	.+10     	; 0x974 <__stack+0x115>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
 96a:	83 e0       	ldi	r24, 0x03	; 3
 96c:	89 83       	std	Y+1, r24	; 0x01
 96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x115>
		}

	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 970:	82 e0       	ldi	r24, 0x02	; 2
 972:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 974:	89 81       	ldd	r24, Y+1	; 0x01
}
 976:	27 96       	adiw	r28, 0x07	; 7
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	f8 94       	cli
 97c:	de bf       	out	0x3e, r29	; 62
 97e:	0f be       	out	0x3f, r0	; 63
 980:	cd bf       	out	0x3d, r28	; 61
 982:	cf 91       	pop	r28
 984:	df 91       	pop	r29
 986:	08 95       	ret

00000988 <SW_enuInit>:
#include "SW_config.h"
#include "SW_priv.h"
#include "DIO_int.h"

ES_t SW_enuInit(SW_t *copy_AstrSwitches)
{
 988:	df 93       	push	r29
 98a:	cf 93       	push	r28
 98c:	00 d0       	rcall	.+0      	; 0x98e <SW_enuInit+0x6>
 98e:	00 d0       	rcall	.+0      	; 0x990 <SW_enuInit+0x8>
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
 994:	9c 83       	std	Y+4, r25	; 0x04
 996:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
 998:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iter=0;
 99a:	19 82       	std	Y+1, r1	; 0x01
	if(copy_AstrSwitches !=NULL)
 99c:	8b 81       	ldd	r24, Y+3	; 0x03
 99e:	9c 81       	ldd	r25, Y+4	; 0x04
 9a0:	00 97       	sbiw	r24, 0x00	; 0
 9a2:	09 f4       	brne	.+2      	; 0x9a6 <SW_enuInit+0x1e>
 9a4:	5c c0       	rjmp	.+184    	; 0xa5e <SW_enuInit+0xd6>
	{
		for(Local_u8Iter=0;Local_u8Iter<Switch_NUM;Local_u8Iter++)
 9a6:	19 82       	std	Y+1, r1	; 0x01
 9a8:	55 c0       	rjmp	.+170    	; 0xa54 <SW_enuInit+0xcc>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(copy_AstrSwitches[Local_u8Iter].SW_u8PortID,copy_AstrSwitches[Local_u8Iter].SW_u8PinID,DIO_INPUT);
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	28 2f       	mov	r18, r24
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	c9 01       	movw	r24, r18
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	28 0f       	add	r18, r24
 9b8:	39 1f       	adc	r19, r25
 9ba:	8b 81       	ldd	r24, Y+3	; 0x03
 9bc:	9c 81       	ldd	r25, Y+4	; 0x04
 9be:	fc 01       	movw	r30, r24
 9c0:	e2 0f       	add	r30, r18
 9c2:	f3 1f       	adc	r31, r19
 9c4:	40 81       	ld	r20, Z
 9c6:	89 81       	ldd	r24, Y+1	; 0x01
 9c8:	28 2f       	mov	r18, r24
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	c9 01       	movw	r24, r18
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	28 0f       	add	r18, r24
 9d4:	39 1f       	adc	r19, r25
 9d6:	8b 81       	ldd	r24, Y+3	; 0x03
 9d8:	9c 81       	ldd	r25, Y+4	; 0x04
 9da:	fc 01       	movw	r30, r24
 9dc:	e2 0f       	add	r30, r18
 9de:	f3 1f       	adc	r31, r19
 9e0:	91 81       	ldd	r25, Z+1	; 0x01
 9e2:	84 2f       	mov	r24, r20
 9e4:	69 2f       	mov	r22, r25
 9e6:	40 e0       	ldi	r20, 0x00	; 0
 9e8:	0e 94 c0 01 	call	0x380	; 0x380 <DIO_enuSetPinDirection>
 9ec:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState=DIO_enuSetPinValue(copy_AstrSwitches[Local_u8Iter].SW_u8PortID,copy_AstrSwitches[Local_u8Iter].SW_u8PinID,copy_AstrSwitches[Local_u8Iter].SW_u8status);
 9ee:	89 81       	ldd	r24, Y+1	; 0x01
 9f0:	28 2f       	mov	r18, r24
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	c9 01       	movw	r24, r18
 9f6:	88 0f       	add	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	28 0f       	add	r18, r24
 9fc:	39 1f       	adc	r19, r25
 9fe:	8b 81       	ldd	r24, Y+3	; 0x03
 a00:	9c 81       	ldd	r25, Y+4	; 0x04
 a02:	fc 01       	movw	r30, r24
 a04:	e2 0f       	add	r30, r18
 a06:	f3 1f       	adc	r31, r19
 a08:	50 81       	ld	r21, Z
 a0a:	89 81       	ldd	r24, Y+1	; 0x01
 a0c:	28 2f       	mov	r18, r24
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	c9 01       	movw	r24, r18
 a12:	88 0f       	add	r24, r24
 a14:	99 1f       	adc	r25, r25
 a16:	28 0f       	add	r18, r24
 a18:	39 1f       	adc	r19, r25
 a1a:	8b 81       	ldd	r24, Y+3	; 0x03
 a1c:	9c 81       	ldd	r25, Y+4	; 0x04
 a1e:	fc 01       	movw	r30, r24
 a20:	e2 0f       	add	r30, r18
 a22:	f3 1f       	adc	r31, r19
 a24:	41 81       	ldd	r20, Z+1	; 0x01
 a26:	89 81       	ldd	r24, Y+1	; 0x01
 a28:	28 2f       	mov	r18, r24
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	c9 01       	movw	r24, r18
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	28 0f       	add	r18, r24
 a34:	39 1f       	adc	r19, r25
 a36:	8b 81       	ldd	r24, Y+3	; 0x03
 a38:	9c 81       	ldd	r25, Y+4	; 0x04
 a3a:	fc 01       	movw	r30, r24
 a3c:	e2 0f       	add	r30, r18
 a3e:	f3 1f       	adc	r31, r19
 a40:	92 81       	ldd	r25, Z+2	; 0x02
 a42:	85 2f       	mov	r24, r21
 a44:	64 2f       	mov	r22, r20
 a46:	49 2f       	mov	r20, r25
 a48:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_enuSetPinValue>
 a4c:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState=ES_NOK;
	u8 Local_u8Iter=0;
	if(copy_AstrSwitches !=NULL)
	{
		for(Local_u8Iter=0;Local_u8Iter<Switch_NUM;Local_u8Iter++)
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	8f 5f       	subi	r24, 0xFF	; 255
 a52:	89 83       	std	Y+1, r24	; 0x01
 a54:	89 81       	ldd	r24, Y+1	; 0x01
 a56:	83 30       	cpi	r24, 0x03	; 3
 a58:	08 f4       	brcc	.+2      	; 0xa5c <SW_enuInit+0xd4>
 a5a:	a7 cf       	rjmp	.-178    	; 0x9aa <SW_enuInit+0x22>
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <SW_enuInit+0xda>
			Local_enuErrorState=DIO_enuSetPinValue(copy_AstrSwitches[Local_u8Iter].SW_u8PortID,copy_AstrSwitches[Local_u8Iter].SW_u8PinID,copy_AstrSwitches[Local_u8Iter].SW_u8status);
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 a5e:	82 e0       	ldi	r24, 0x02	; 2
 a60:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
 a62:	8a 81       	ldd	r24, Y+2	; 0x02
}
 a64:	0f 90       	pop	r0
 a66:	0f 90       	pop	r0
 a68:	0f 90       	pop	r0
 a6a:	0f 90       	pop	r0
 a6c:	cf 91       	pop	r28
 a6e:	df 91       	pop	r29
 a70:	08 95       	ret

00000a72 <SW_enuGetSwitchState>:
ES_t SW_enuGetSwitchState(SW_t *copy_strPortID,SW_t *copy_strValue)
{
 a72:	df 93       	push	r29
 a74:	cf 93       	push	r28
 a76:	00 d0       	rcall	.+0      	; 0xa78 <SW_enuGetSwitchState+0x6>
 a78:	00 d0       	rcall	.+0      	; 0xa7a <SW_enuGetSwitchState+0x8>
 a7a:	0f 92       	push	r0
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62
 a80:	9b 83       	std	Y+3, r25	; 0x03
 a82:	8a 83       	std	Y+2, r24	; 0x02
 a84:	7d 83       	std	Y+5, r23	; 0x05
 a86:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
 a88:	19 82       	std	Y+1, r1	; 0x01
	if(copy_strPortID!=NULL && copy_strValue!=NULL)
 a8a:	8a 81       	ldd	r24, Y+2	; 0x02
 a8c:	9b 81       	ldd	r25, Y+3	; 0x03
 a8e:	00 97       	sbiw	r24, 0x00	; 0
 a90:	91 f0       	breq	.+36     	; 0xab6 <SW_enuGetSwitchState+0x44>
 a92:	8c 81       	ldd	r24, Y+4	; 0x04
 a94:	9d 81       	ldd	r25, Y+5	; 0x05
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	71 f0       	breq	.+28     	; 0xab6 <SW_enuGetSwitchState+0x44>
	{
		Local_enuErrorState=DIO_enuGetPinValue(copy_strPortID->SW_u8PortID,copy_strPortID->SW_u8PinID,copy_strValue);
 a9a:	ea 81       	ldd	r30, Y+2	; 0x02
 a9c:	fb 81       	ldd	r31, Y+3	; 0x03
 a9e:	80 81       	ld	r24, Z
 aa0:	ea 81       	ldd	r30, Y+2	; 0x02
 aa2:	fb 81       	ldd	r31, Y+3	; 0x03
 aa4:	91 81       	ldd	r25, Z+1	; 0x01
 aa6:	2c 81       	ldd	r18, Y+4	; 0x04
 aa8:	3d 81       	ldd	r19, Y+5	; 0x05
 aaa:	69 2f       	mov	r22, r25
 aac:	a9 01       	movw	r20, r18
 aae:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_enuGetPinValue>
 ab2:	89 83       	std	Y+1, r24	; 0x01
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <SW_enuGetSwitchState+0x48>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 ab6:	82 e0       	ldi	r24, 0x02	; 2
 ab8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 aba:	89 81       	ldd	r24, Y+1	; 0x01
}
 abc:	0f 90       	pop	r0
 abe:	0f 90       	pop	r0
 ac0:	0f 90       	pop	r0
 ac2:	0f 90       	pop	r0
 ac4:	0f 90       	pop	r0
 ac6:	cf 91       	pop	r28
 ac8:	df 91       	pop	r29
 aca:	08 95       	ret

00000acc <main>:
#include "SW_int.h"
#include <util/delay.h>

extern SW_t SW_AstrSwitchConfug[Switch_NUM];
int main(void)
{
 acc:	df 93       	push	r29
 ace:	cf 93       	push	r28
 ad0:	0f 92       	push	r0
 ad2:	cd b7       	in	r28, 0x3d	; 61
 ad4:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 ad6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	SW_enuInit(SW_AstrSwitchConfug);
 ada:	80 e6       	ldi	r24, 0x60	; 96
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 c4 04 	call	0x988	; 0x988 <SW_enuInit>

	u8 pinstate=0;
 ae2:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		SW_enuGetSwitchState(&SW_AstrSwitchConfug[0],&pinstate);
 ae4:	80 e6       	ldi	r24, 0x60	; 96
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	9e 01       	movw	r18, r28
 aea:	2f 5f       	subi	r18, 0xFF	; 255
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	b9 01       	movw	r22, r18
 af0:	0e 94 39 05 	call	0xa72	; 0xa72 <SW_enuGetSwitchState>

		if(pinstate==0)
 af4:	89 81       	ldd	r24, Y+1	; 0x01
 af6:	88 23       	and	r24, r24
 af8:	31 f4       	brne	.+12     	; 0xb06 <main+0x3a>
		{
			DIO_enuSetPinValue(DIO_PORTB,PIN1,DIO_HIGH);
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	61 e0       	ldi	r22, 0x01	; 1
 afe:	41 e0       	ldi	r20, 0x01	; 1
 b00:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_enuSetPinValue>
 b04:	ef cf       	rjmp	.-34     	; 0xae4 <main+0x18>
		}
		else
		{
			DIO_enuSetPinValue(DIO_PORTB,PIN1,DIO_LOW);
 b06:	81 e0       	ldi	r24, 0x01	; 1
 b08:	61 e0       	ldi	r22, 0x01	; 1
 b0a:	40 e0       	ldi	r20, 0x00	; 0
 b0c:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_enuSetPinValue>
 b10:	e9 cf       	rjmp	.-46     	; 0xae4 <main+0x18>

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
